#!/bin/bash
# Nagios plugin to monitor Puppet agent state
#
# Copyright (c) 2011 Alexander Swen <a@swen.nu>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#
# Example configuration
#
# Typical this check is placed on a client and run via nrpe
# so add this to nrpe.cfg:
#  command[check_puppet_agent]=/usr/lib/nagios/plugins/check_puppet -w 3600 -c 7200
# This should warn when the agent hasnt run for an hour and go critical after two hours
#  if you have dont_blame_nrpe=1 set you can choose to
#  command[check_puppet_agent]=/usr/lib/nagios/plugins/check_puppet -w $ARG1$ -c $ARG2$
#
# define service {
#  use generic-service
#  service_description Puppet agent
#  check_command check_nrpe!check_puppet_agent
# or
#  check_command check_nrpe!check_puppet_agent!3600!7200 
#}

# CHANGELOG:
# 20120126	A.Swen	    created.
# 20120214  trey85stang Modified, added getopts, usage, defaults
# 20120220  A.Swen      Statefile can be overriden
# 20120909  S.Deziel    Don't check if the agent daemon is running by default. To enable this
#                       check, use "-a". This is useful when using cron instead of the daemon.
#                       Call puppet config to find the location of lastrunfile only
#                       if none is provided using "-s".
# 20150707 S.Deziel     Fix agent daemon regex to match for newer ruby versions. Fix lastrunfile
#                       query to work with recent versions of puppet.
# 20170922 J.Grammenos  Fix typo
# 20181210 V.Perry      Path to puppet for puppet6, support variable lastrunfile indentation

# Explicitly set the PATH to that of ENV_SUPATH in /etc/login.defs and unset
# various other variables. For details, see:
# https://wiki.ubuntu.com/SecurityTeam/AppArmorPolicyReview#Execute_rules
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export ENV=
export BASH_ENV=
export CDPATH=
export GLOBIGNORE=
export BASH_XTRACEFD=

# SETTINGS
AGENT_DAEMON=false
CRIT=7200
WARN=3600
statefile=""
perf_data=""
ENABLE_PERF_DATA=false

# FUNCTIONS
result () {
  case $1 in
    0) echo "OK: Puppet agent ${version} running catalogversion ${config}|${perf_data}";rc=0 ;;
    1) echo "UNKNOWN: last_run_summary.yaml not found, not readable or incomplete|${perf_data}";rc=3 ;;
    2) echo "WARNING: Last run was ${time_since_last} seconds ago. warn is ${WARN}|${perf_data}";rc=1 ;;
    3) echo "CRITICAL: Last run was ${time_since_last} seconds ago. crit is ${CRIT}|${perf_data}";rc=2 ;;
    4) echo "CRITICAL: Puppet daemon not running|${perf_data}";rc=2 ;;
    5) echo "UNKNOWN: no WARN or CRIT parameters were sent to this check|${perf_data}";rc=3 ;;
    6) echo "CRITICAL: Last run had 1 or more errors. Check the logs|${perf_data}";rc=2 ;;
  esac
  exit $rc
}

usage () {
  echo ""
  echo "USAGE: "
  echo "  $0 [-w 3600] [-c 7200] [-s statefile]"
  echo "    -w warning threshold (default 3600 seconds)"
  echo "    -c critical threshold (default 7200 seconds)"
  echo "    -s statefile (default: /var/lib/puppet/state/last_run_summary.yaml)"
  echo "    -p output performance data"
  echo ""
  exit 1
}

yaml_parser () {
  section=$1
  field=$2

  indent=$(sed -n "s/^\([ ]*\)$section:$/\1/p" ${statefile})
  sed -n "/^$indent$section/,/^$indent[^ ]/ s/^$indent  $field: \(.*\)$/\1/p" ${statefile}
}

while getopts "ac:s:w:p" opt
do
  case $opt in
    a) AGENT_DAEMON=true ;;
    c)
      if ! echo $OPTARG | grep -q "[A-Za-z]" && [ -n "$OPTARG" ]
      then
        CRIT=$OPTARG
      else
        usage
      fi
    ;;
    p) ENABLE_PERF_DATA=true ;;
    s) statefile=${OPTARG} ;;
    w)
      if ! echo $OPTARG | grep -q "[A-Za-z]" && [ -n "$OPTARG" ]
      then
        WARN=$OPTARG
      else
        usage
      fi
    ;;
    *)
      usage
    ;;
  esac
done

# find the state file if none provided
statefile="${statefile:="$(puppet config print lastrunfile)"}"

# check if state file exists
[ -s "${statefile}" -a -r "${statefile}" ] || result 1

if [ "$AGENT_DAEMON" = "true" ]; then
  # check puppet daemon:
  # I only know the cmd lines for Debian and CentOS/RedHat:
  [ "$(ps axf|egrep "/usr/bin/ruby /usr/sbin/puppetd|/usr/bin/ruby.* /usr/bin/puppet agent")" ] || result 4
fi

# get some more info from the yaml file
config="$(yaml_parser 'version' 'config')"
version="$(yaml_parser 'version' 'puppet')"
failed="$(yaml_parser 'resources' 'failed')"
failed_to_restart="$(yaml_parser 'resources' 'failed_to_restart')"
failure="$(yaml_parser 'events' 'failure')"

if [ "$ENABLE_PERF_DATA" = "true" ]; then
  # extract some perf data
  time_total="$(yaml_parser 'time' 'total')"
  time_config_retrieval="$(yaml_parser 'time' 'config_retrieval')"
  changes="$(yaml_parser 'changes' 'total')"
  if [ -n "${time_total}" -a -n "${time_config_retrieval}" -a -n "${changes}" ]; then
    perf_data="time=${time_total} config_retrieval=${time_config_retrieval} changes=${changes}"
  fi
fi

[ -z "${config}" -o -z "${version}" -o -z "${failed}" -o -z "${failure}" -o -z "${failed_to_restart}" ] && result 1
[ "${failed}" -gt 0 -o "${failure}" -gt 0 -o "${failed_to_restart}" -gt 0 ] && result 6

# check when last run happened
last_run="$(yaml_parser 'time' 'last_run')"
[ -z "${last_run}" ] && result 1

# Attempt to get the uptime in seconds
if [ -r /proc/uptime ]; then
  uptime="$(awk -F. '{print $1}' /proc/uptime)"
else
  uptime=0
fi

# If the uptime is greater than the critical threshold
# check if the last run is too old. This ensure that a box
# that was offline for an extended period won't warn until
# it had a chance to run the puppet agent at least once.
# If the uptime is NOT available, run check and potentially
# warn uselessly.
if [ "${uptime}" -gt "${CRIT}" -o "${uptime}" -eq 0 ]; then
  now="$(date +%s)"
  time_since_last="$((now-last_run))"
  [ "${time_since_last}" -ge "${CRIT}" ] && result 3
  [ "${time_since_last}" -ge "${WARN}" ] && result 2
fi

# if we come here it works!
result 0

# END
